{"version":3,"sources":["webpack:///./node_modules/color-string/index.js","webpack:///./node_modules/simple-swizzle/index.js","webpack:///./node_modules/color-name/index.js","webpack:///./node_modules/color/index.js","webpack:///./node_modules/@directus/extension-toolkit/mixins/interface.js","webpack:///./node_modules/color-convert/route.js","webpack:///./node_modules/color-convert/conversions.js","webpack:///./node_modules/simple-swizzle/node_modules/is-arrayish/index.js","webpack:///./node_modules/color-convert/index.js"],"names":["colorNames","__webpack_require__","swizzle","reverseNames","name","hasOwnProperty","cs","module","exports","to","get","clamp","num","min","max","Math","hexDouble","str","toString","toUpperCase","length","string","val","model","prefix","substring","toLowerCase","hsl","hwb","rgb","value","match","i","hexAlpha","abbr","hex","rgba","per","keyword","i2","parseInt","slice","round","parseFloat","alpha","h","s","l","a","isNaN","w","b","arguments","percent","r","g","hsla","hwba","isArrayish","concat","Array","prototype","args","results","len","arg","call","push","wrap","fn","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","colorString","convert","_slice","skippedModels","hashedModelKeys","Object","keys","forEach","labels","sort","join","limiters","Color","obj","this","Error","channels","color","valpha","result","newArr","zeroArray","splice","indexOf","hashedKeys","JSON","stringify","limit","freeze","roundTo","places","Number","toFixed","roundToPlace","getset","channel","modifier","isArray","m","maxfn","v","assertArray","arr","toJSON","self","percentString","array","object","unitArray","unitObject","map","hue","saturationl","lightness","saturationv","chroma","wblack","x","y","z","rgbNumber","luminosity","lum","chan","pow","contrast","color2","lum1","lum2","level","contrastRatio","isDark","yiq","isLight","negate","lighten","ratio","darken","saturate","desaturate","whiten","blacken","grayscale","fade","opaquer","rotate","degrees","mix","mixinColor","weight","color1","p","undefined","w1","w2","newAlpha","raw","props","id","type","String","required","default","readonly","Boolean","options","newItem","relation","fields","values","conversions","buildGraph","graph","models","distance","parent","deriveBFS","fromModel","queue","current","pop","adjacents","adjacent","node","unshift","link","from","wrapConversion","toModel","path","cur","conversion","cssKeywords","reverseKeywords","key","hsv","cmyk","xyz","lab","lch","ansi16","ansi256","hcg","apple","defineProperty","comparativeDistance","delta","rdif","gdif","bdif","diff","diffc","c","k","reversed","currentClosestKeyword","currentClosestDistance","Infinity","t1","t2","t3","sv","smin","lmin","hi","floor","f","q","t","sl","vmin","n","wh","bl","y2","x2","z2","hr","atan2","PI","sqrt","cos","sin","ansi","mult","rem","integer","split","char","pure","mg","Function","getOwnPropertyDescriptor","constructor","route","wrapRaw","wrappedFn","wrapRounded","routes","routeModels"],"mappings":"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","file":"js/chunk-40022460.89232268.js","sourcesContent":["/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\n\nvar reverseNames = {};\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (colorNames.hasOwnProperty(name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar keyword = /(\\D+)/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\n\t\tif (!rgb) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d*\\.)?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = (parseFloat(match[1]) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d*[\\.]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = num.toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","'use strict';\n\nvar colorString = require('color-string');\nvar convert = require('color-convert');\n\nvar _slice = [].slice;\n\nvar skippedModels = [\n\t// to be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// shouldn't really be in color-convert either...\n\t'hex'\n];\n\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function (model) {\n\thashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;\n});\n\nvar limiters = {};\n\nfunction Color(obj, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tvar i;\n\tvar channels;\n\n\tif (typeof obj === 'undefined') {\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (obj instanceof Color) {\n\t\tthis.model = obj.model;\n\t\tthis.color = obj.color.slice();\n\t\tthis.valpha = obj.valpha;\n\t} else if (typeof obj === 'string') {\n\t\tvar result = colorString.get(obj);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + obj);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (obj.length) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tvar newArr = _slice.call(obj, 0, channels);\n\t\tthis.color = zeroArray(newArr, channels);\n\t\tthis.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n\t} else if (typeof obj === 'number') {\n\t\t// this is always RGB - can be converted later on.\n\t\tobj &= 0xFFFFFF;\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(obj >> 16) & 0xFF,\n\t\t\t(obj >> 8) & 0xFF,\n\t\t\tobj & 0xFF\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tvar keys = Object.keys(obj);\n\t\tif ('alpha' in obj) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n\t\t}\n\n\t\tvar hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(obj));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tvar labels = convert[this.model].labels;\n\t\tvar color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(obj[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tvar limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString: function () {\n\t\treturn this.string();\n\t},\n\n\ttoJSON: function () {\n\t\treturn this[this.model]();\n\t},\n\n\tstring: function (places) {\n\t\tvar self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString: function (places) {\n\t\tvar self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray: function () {\n\t\treturn this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n\t},\n\n\tobject: function () {\n\t\tvar result = {};\n\t\tvar channels = convert[this.model].channels;\n\t\tvar labels = convert[this.model].labels;\n\n\t\tfor (var i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray: function () {\n\t\tvar rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject: function () {\n\t\tvar rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround: function (places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n\t},\n\n\talpha: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(100)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(100)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.rgb().color;\n\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tisDark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.rgb().color;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tisLight: function () {\n\t\treturn !this.isDark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = this.rgb();\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\t\treturn rgb;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale: function () {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar rgb = this.rgb().color;\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(val, val, val);\n\t},\n\n\tfade: function (ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer: function (ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.hsl();\n\t\tvar hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix: function (mixinColor, weight) {\n\t\t// ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tvar color1 = mixinColor.rgb();\n\t\tvar color2 = this.rgb();\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t}\n};\n\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function (model) {\n\tif (skippedModels.indexOf(model) !== -1) {\n\t\treturn;\n\t}\n\n\tvar channels = convert[model].channels;\n\n\t// conversion methods\n\tColor.prototype[model] = function () {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (arguments.length) {\n\t\t\treturn new Color(arguments, model);\n\t\t}\n\n\t\tvar newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;\n\t\treturn new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (color) {\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(_slice.call(arguments), channels);\n\t\t}\n\t\treturn new Color(color, model);\n\t};\n});\n\nfunction roundTo(num, places) {\n\treturn Number(num.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (num) {\n\t\treturn roundTo(num, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tmodel.forEach(function (m) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t});\n\n\tmodel = model[0];\n\n\treturn function (val) {\n\t\tvar result;\n\n\t\tif (arguments.length) {\n\t\t\tif (modifier) {\n\t\t\t\tval = modifier(val);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = val;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(val) {\n\treturn Array.isArray(val) ? val : [val];\n}\n\nfunction zeroArray(arr, length) {\n\tfor (var i = 0; i < length; i++) {\n\t\tif (typeof arr[i] !== 'number') {\n\t\t\tarr[i] = 0;\n\t\t}\n\t}\n\n\treturn arr;\n}\n\nmodule.exports = Color;\n","module.exports = {\n  props: {\n    // Unique id for this interface. Should be added to the lower level \n    // HTML input element if applicable. This ID will be used in the label's\n    // `for` attribute\n    id: {\n      type: String,\n      required: true\n    },\n    // Name of the field\n    name: {\n      type: String,\n      required: true\n    },\n    // The current value. This can either be the default value, the saved database\n    // value or the current state after the user made an edit\n    value: {\n      type: null,\n      default: null\n    },\n    // Type of the field, eg `string`, `hash`, or `array`\n    type: {\n      type: String,\n      required: true\n    },\n    // Max length\n    length: {\n      type: [String, Number],\n      default: null\n    },\n    // If the field is readonly or not\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    // If the field is required or not\n    required: {\n      type: Boolean,\n      default: false\n    },\n    // Field options. A json object based on the interface's meta.json file\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    // If the item that's currently being edited is new\n    newItem: {\n      type: Boolean,\n      default: false\n    },\n    // The relation of the current field. Will contain information on the related\n    // collection and field(s)\n    relation: {\n      type: Object,\n      default: null\n    },\n    // The other fields in the current edit page\n    fields: {\n      type: Object,\n      default: null\n    },\n    // The values of the other fields on the edit page. Can be used for things like\n    // automatically generating a slug based on another field\n    values: {\n      type: Object,\n      default: null\n    }\n  }\n};\n","var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n","/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n","var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n"],"sourceRoot":""}